import mysql.connector
import random
import tkinter as tk
from tkinter import messagebox

from paqueteJuego.Conexion import Conexion


class Ahorcado:
    """Clase para manejar la lógica del juego y la interfaz gráfica."""

    def __init__(self, db):
        self.db = db
        self.palabra = ""
        self.palabra_guiones = []
        self.letras_incorrectas = set()
        self.intentos_restantes = 6
        self.usuario_id = None
        self.ganadas = 0
        self.perdidas = 0

        # Crear ventana inicial
        self.ventana_inicial = tk.Tk()
        self.ventana_inicial.title("Juego del Ahorcado")

        tk.Label(self.ventana_inicial, text="Bienvenido al Juego del Ahorcado").pack(pady=10)
        tk.Button(self.ventana_inicial, text="Jugar", command=self.abrir_juego).pack(pady=5)
        tk.Button(self.ventana_inicial, text="Salir", command=self.ventana_inicial.quit).pack(pady=5)

        # Crear ventana principal del juego (pero mantenerla oculta inicialmente)
        self.root = tk.Toplevel(self.ventana_inicial)
        self.root.title("Juego del Ahorcado")
        self.root.withdraw()  # Ocultar la ventana principal al inicio

        def salir(self):
            """Cierra ambas ventanas y termina el programa."""
        self.ventana_inicial.destroy()  # Cierra la ventana inicial
        self.root.destroy()  # Cierra la ventana del juego

        # Widgets de la ventana del juego
        self.label_nombre = tk.Label(self.root, text="Introduce tu nombre:")
        self.label_nombre.pack()

        self.entry_nombre = tk.Entry(self.root)
        self.entry_nombre.pack()

        self.label_tema = tk.Label(self.root, text="Selecciona un tema:")
        self.label_tema.pack()

        self.combo_tema = tk.StringVar(value="Personas")
        self.combo = tk.OptionMenu(self.root, self.combo_tema, "Personas", "Frutas", "Informatico")
        self.combo.pack()

        self.label_letra = tk.Label(self.root, text="Introduce una letra:")
        self.label_letra.pack()

        self.entry_letra = tk.Entry(self.root, state=tk.DISABLED)
        self.entry_letra.pack()

        self.button_adivinar = tk.Button(self.root, text="Adivinar letra", command=self.adivinar_letra)
        self.button_adivinar.pack()

        self.label_palabra = tk.Label(self.root, text="")
        self.label_palabra.pack()

        self.label_intentos = tk.Label(self.root, text="Intentos restantes: ")
        self.label_intentos.pack()

        self.label_incorrectas = tk.Label(self.root, text="Letras incorrectas: ")
        self.label_incorrectas.pack()

        self.label_ganadas = tk.Label(self.root, text="Ganadas: 0")
        self.label_ganadas.pack()

        self.label_perdidas = tk.Label(self.root, text="Perdidas: 0")
        self.label_perdidas.pack()

        self.button_comenzar = tk.Button(self.root, text="Comenzar juego", command=self.jugar)
        self.button_comenzar.pack()

        self.button_volver = tk.Button(self.root, text="Volver al menú principal", command=self.volver_principal)
        self.button_volver.pack()

        self.button_reiniciar = tk.Button(self.root, text="Reiniciar", command=self.reiniciar)
        self.button_reiniciar.pack()

    def abrir_juego(self):
        """Muestra la ventana principal del juego y oculta la inicial."""
        self.ventana_inicial.withdraw()
        self.root.deiconify()

    def volver_principal(self):
        """Regresa a la ventana inicial y oculta la ventana del juego."""
        self.root.withdraw()
        self.ventana_inicial.deiconify()

    def reiniciar(self):
        """Reinicia el estado del juego actual."""
        self.entry_nombre.delete(0, tk.END)
        self.combo_tema.set("Personas")
        self.entry_letra.delete(0, tk.END)
        self.entry_letra.config(state=tk.DISABLED)
        self.palabra = ""
        self.palabra_guiones = []
        self.letras_incorrectas = set()
        self.intentos_restantes = 6
        self.label_palabra.config(text="")
        self.label_intentos.config(text="Intentos restantes: ")
        self.label_incorrectas.config(text="Letras incorrectas: ")
        messagebox.showinfo("Reinicio", "El juego ha sido reiniciado. Introduce un nombre y comienza de nuevo.")

    def jugar(self):
        """Inicia una nueva partida."""
        self.nombre = self.entry_nombre.get().strip()

        # Verificar si el usuario existe en la base de datos
        usuario = self.db.obtenerUsuario(self.nombre)
        if not usuario:
            messagebox.showinfo("Bienvenida", f"¡Bienvenido, {self.nombre}! Creando un nuevo usuario.")
            self.db.crearUsuario(self.nombre)
            usuario = self.db.obtenerUsuario(self.nombre)

        self.usuario_id, self.ganadas, self.perdidas = usuario

        # Elegir un tema
        tipo = self.combo_tema.get()

        # Cargar palabras según el tema elegido
        palabras = self.db.cargarPalabras(tipo)
        self.palabra = random.choice(palabras)
        self.palabra_guiones = ["_"] * len(self.palabra)
        self.letras_incorrectas = set()

        # Restablecer intentos
        self.intentos_restantes = 6

        # Mostrar la palabra y las letras incorrectas
        self.label_palabra.config(text=" ".join(self.palabra_guiones))
        self.label_intentos.config(text=f"Intentos restantes: {self.intentos_restantes}")
        self.label_incorrectas.config(text=f"Letras incorrectas: {' '.join(self.letras_incorrectas)}")

        # Hacer visible el campo de letras a adivinar
        self.entry_letra.config(state=tk.NORMAL)
        self.entry_letra.delete(0, tk.END)  # Limpiar el campo de letra

    def adivinar_letra(self):
        """Maneja la lógica para adivinar una letra."""
        letra = self.entry_letra.get().lower()
        if len(letra) != 1 or not letra.isalpha():
            messagebox.showwarning("Advertencia", "Por favor, introduce solo una letra válida.")
            return

        if letra in self.letras_incorrectas or letra in self.palabra_guiones:
            messagebox.showwarning("Advertencia", "Ya has adivinado esa letra. Intenta con otra.")
            return

        # Borrar la letra del campo de entrada después de cada intento
        self.entry_letra.delete(0, tk.END)

        if letra in self.palabra:
            for i in range(len(self.palabra)):
                if self.palabra[i] == letra:
                    self.palabra_guiones[i] = letra
            self.label_palabra.config(text=" ".join(self.palabra_guiones))
            messagebox.showinfo("Bien", f"¡Bien! La letra '{letra}' está en la palabra.")
        else:
            self.intentos_restantes -= 1
            self.letras_incorrectas.add(letra)
            self.label_intentos.config(text=f"Intentos restantes: {self.intentos_restantes}")
            self.label_incorrectas.config(text=f"Letras incorrectas: {' '.join(self.letras_incorrectas)}")
            messagebox.showinfo("Mal", f"Lo siento, la letra '{letra}' no está en la palabra.")

        # Comprobar si el jugador adivinó la palabra
        if "_" not in self.palabra_guiones:
            messagebox.showinfo("Felicidades", f"¡Felicidades! Has adivinado la palabra: {self.palabra}")
            self.ganadas += 1
            self.db.guardarHistorial(self.usuario_id, self.ganadas, self.perdidas)
            self.label_ganadas.config(text=f"Ganadas: {self.ganadas}")
            return

        if self.intentos_restantes == 0:
            messagebox.showinfo("Perdido", f"Perdiste. La palabra era: {self.palabra}")
            self.perdidas += 1
            self.db.guardarHistorial(self.usuario_id, self.ganadas, self.perdidas)
            self.label_perdidas.config(text=f"Perdidas: {self.perdidas}")
            return

    def run(self):
        """Inicia el bucle principal de la interfaz gráfica."""
        self.ventana_inicial.mainloop()


# Instanciar la base de datos y la interfaz del juego

db = Conexion("127.0.0.1", "root", "", "ahorcado", "3306")
game = Ahorcado(db)
game.run()